---
title: "Unit 2 - Processing Data"
engine: julia
---

In this unit we focus on "data". We start by considering basic Julia data structures including dictionaries, sets, named tuples, and others. We then then focus on basic text (string) processing in Julia. Then we move onto Dataframes - a general and useful way to keep tabular data. We then touch on JSON files, and serialization.

# Basic data structures

Here are some basic data structures in Julia:

## Dictionaries

```{julia}
pop = Dict()
pop["Australia"] = 27_809_000
pop["United States"] = 340_110_988
pop["Finland"] = 5_700_000

pop
```


```{julia}
strict_pop = Dict{String,Int}()
strict_pop["Australia"] = 27_809_000
strict_pop["United States"] = 340_110_988
strict_pop["Finland"] = 5_700_000

strict_pop
```


```{julia}
# this is okay
pop["North Pole"] = 0.5
# not okay
strict_pop["North Pole"] = 0.5
```

todo(aapeli): more dict

## Sets

```{julia}
A = Set([2,7,2,3])
B = Set(1:6)
omega = Set(1:10)

AunionB = union(A, B)
AintersectionB = intersect(A, B)
BdifferenceA = setdiff(B,A)
Bcomplement = setdiff(omega,B)
AsymDifferenceB = union(setdiff(A,B),setdiff(B,A))
println("A = $A, B = $B")
println("A union B = $AunionB")
println("A intersection B = $AintersectionB")
println("B diff A = $BdifferenceA")
println("B complement = $Bcomplement")
println("A symDifference B = $AsymDifferenceB")
println("The element '6' is an element of A: $(in(6,A))")
println("Symmetric difference and intersection are subsets of the union: ",
        issubset(AsymDifferenceB,AunionB),", ", issubset(AintersectionB,AunionB))
```

## Named tuples

```{julia}
my_stuff = (age=28, gender=:male, name="Aapeli")
yonis_stuff = (age=51, gender=:male, name="Yoni")

my_stuff.gender
```


```{julia}
using Plots
using LaTeXStrings

# we can use named tuples to pass in keyword arguments
args = (label=false, xlim=(-1,1), xlabel=L"x")
# `...` is the "splat" operator, similar to `**args` in python
p1 = plot(x->sin(1/x); ylabel=L"\sin(\frac{1}{x})", args...)
p2 = plot(x->cos(1/x); ylabel=L"\cos(\frac{1}{x})", args...)
plot(p1, p2, size=(700,300))
```


```{julia}
using DataStructures

# todo(aapeli): trie... etc
```

# Basic text processing

```{julia}
x = 2
"The value of x is $x"
```

```{julia}
split("Hello world!")
```

```{julia}
my_life_story = """
I was born
in 1935.
"""
```

```{julia}
ismutable(String)
```

```{julia}
println("A rough ASCII table")
println("Decimal\tHex\tCharacter")
for c in 0x20:0x7E
    println(c,"\t","0x" * string(c,base=16),"\t",Char(c))
end
```

## Regular Expressions

```{julia}
text = "Julia is fun!"
pattern = r"Julia"
occursin(pattern, text)   # true
```

```{julia}
text = "Order number: 12345, Qty: 67"
pattern = r"\d+"
numbers = collect(m.match for m in eachmatch(pattern, text))
```

# Dataframes and CSV files - intro


Here is data for brisbane speed camera locations:

```{julia}
using HTTP
using CSV
using DataFrames

response = HTTP.get("https://www.data.qld.gov.au/datastore/dump/f6b5c37e-de9d-4041-8c18-f4d4b6c593a8?bom=True")

df = CSV.read(IOBuffer(response.body), DataFrame)

first(df, 5)
```

```{julia}
using SummaryTables

simple_table(first(df, 5))
```

```{julia}
# simple_table(df)
```

<!-- speed cameras by suburb vs 

missing data:... -->

# Dataframes - Transformations

<!-- Pumas

groupby/combine -->

# JSON

```{julia}

```

# Serialization

* struct (mutable & immutable)
* write to file
* read from file

```{julia}

```


```{julia}
using Random

Random.seed!(0)

struct Node
    id::UInt16
    friends::Vector{Node}

    # inner constructor, uses the default constructor
    Node() = new(rand(UInt16), [])
    # another inner constructor
    Node(friend::Node) = new(rand(UInt16),[friend])
end
```

```{julia}
"""
Makes `n` children to node, each with a single friend
"""
function make_children(node::Node, n::Int, friend::Node)
    for _ in 1:n
        new_node = Node(friend)
        push!(node.friends, new_node)
    end
end
```


```{julia}
# make a tree
root = Node()
make_children(root, 3, root)
for node in root.friends
    make_children(node, 2,root)
end

root
```

Note that when we try to show `root`, it's complete gibberish. We can write a `Base.show()` function to make this pretty:

```{julia}
# make it show up pretty
function Base.show(io::IO, x::Node)
    shown = Set{Node}()
    function recursive_show(y::Node, depth::Int)
        print(io, "  "^depth*"Node: $(y.id)")
        if y in shown
            println(io, " (already shown)")
        else
            push!(shown, y)
            println(io, ", friends:")
            for f in y.friends
                recursive_show(f, depth+1)
            end
        end
    end
    recursive_show(x, 0)
    return nothing
end

root
```

Suppose we now want to save this in a file...

```{julia}
using Serialization
serialize("work/tree.dat", root)
```



```{julia}
newroot = deserialize("work/tree.dat")
```

# Additional online resources

* Basic blog post about [Tuples and Vectors, Allocations and Performance for Beginners
](https://jkrumbiegel.com/pages/2020-10-31-tuples-and-vectors/).
* This [introductory post](https://blog.glcs.io/staticarrays) covers [StaticArrays.jl](https://github.com/JuliaArrays/StaticArrays.jl) which is a popular library used in many numerical packages.
* The book @storopolihuijzeralonso2021juliadatascience is a good resource for DataFrames.  
* A papper about `DataFrames.jl` made it into the Journal of Statistical Software, @bouchet2023dataframes.
* The book @kaminski2023julia is also written by the main creator of `DataFrames.jl`.
* This [Pumas `DataFramesMeta.jl` tutorial](https://tutorials.pumas.ai/html/DataWranglingInJulia/05-mutating-dfmeta.html) is useful.
* See this [Hacker News](https://news.ycombinator.com/item?id=29360221) discussion around [JSON.jl](https://github.com/JuliaIO/JSON.jl) and [JSON3.jl](https://github.com/quinnj/JSON3.jl).
* This unit used many macros. The proper documentation is [here](https://docs.julialang.org/en/v1/manual/metaprogramming/). This [blog post](https://jkrumbiegel.com/pages/2021-06-07-macros-for-beginners/) is an elementary introduction.

# Exercises

1. You have this dictionary:
```
        country_capital = Dict(
                                "France" => "Paris",
                                "Germany" => "Berlin",
                                "Italy" => "Rome",
                                "Spain" => "Madrid")
```
Now create a new dictionary, `capital_country` where the keys are the capital cities and the values are the country names.

2. Looking up with the `in` or `âˆˆ` symbol is possible both in an array and a set. You can create an array with `rand(1:10^10, 10^7)` which will have $10^7$ entries, selected from the numbers $1,\ldots,10^{10}$. You can also wrap this to create a set. Now compare lookup timings with `@time` or `@btime` (from BenchmarkTools.jl) for lookup to see if a single `rand(1:10^10)` is an element of the set.
2. Given the string `text = "Julia is a high-level, high-performance programming language."`, write Julia code to count how many times the substring "high" appears in the text (case-insensitive).
2. Install the `Rdatasets.jl` package. Then load the "iris" dataset. Then, filter the DataFrame to only include rows where the SepalLength is greater than its mean, and display the first five rows of the result.
2. Load the "mtcars" dataset from `RDatasets`. Then, group the data by the `Cyl` (number of cylinders) column and compute the average `MPG` (miles per gallon) for each group. Display the resulting summary DataFrame.
2. Consider this JSON file (put it in a string):
```
                {
                  "name": "Alice",
                  "age": 30,
                  "skills": ["Julia", "Python", "SQL"]
                }
```
Given the JSON string above, write Julia code to parse it and print the person's name and the number of skills they have.

7. Create an array of $10^6$ random `Float64` (you can use `rand(Float64, 3)`). Then serialize and inspect the file size. See it makes sense with `sizeof(Float64)`. Now do the same with `Float16`, `Float32`, `UInt8`, and another type of your choice.

