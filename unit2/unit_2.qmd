---
title: "Unit 2 - Processing Data"
engine: julia
---

# Basic data structures

## Dictionaries

```{julia}
pop = Dict()
pop["Australia"] = 27_809_000
pop["United States"] = 340_110_988
pop["Finland"] = 5_700_000

pop
```


```{julia}
strict_pop = Dict{String,Int}()
strict_pop["Australia"] = 27_809_000
strict_pop["United States"] = 340_110_988
strict_pop["Finland"] = 5_700_000

strict_pop
```


```{julia}
# this is okay
pop["North Pole"] = 0.5
# not okay
strict_pop["North Pole"] = 0.5
```

todo(aapeli): more dict

## Sets

```{julia}
A = Set([2,7,2,3])
B = Set(1:6)
omega = Set(1:10)

AunionB = union(A, B)
AintersectionB = intersect(A, B)
BdifferenceA = setdiff(B,A)
Bcomplement = setdiff(omega,B)
AsymDifferenceB = union(setdiff(A,B),setdiff(B,A))
println("A = $A, B = $B")
println("A union B = $AunionB")
println("A intersection B = $AintersectionB")
println("B diff A = $BdifferenceA")
println("B complement = $Bcomplement")
println("A symDifference B = $AsymDifferenceB")
println("The element '6' is an element of A: $(in(6,A))")
println("Symmetric difference and intersection are subsets of the union: ",
        issubset(AsymDifferenceB,AunionB),", ", issubset(AintersectionB,AunionB))
```

## Named tuples

```{julia}
my_stuff = (age=28, gender=:man, name="Aapeli")
yonis_stuff = (age=51, gender=:man, name="Yoni")

my_stuff.gender
```


```{julia}
using Plots
using LaTeXStrings

# we can use named tuples to pass in keyword arguments
args = (label=false, xlim=(-1,1), xlabel=L"x")
# `...` is the "splat" operator, similar to `**args` in python
p1 = plot(x->sin(1/x); ylabel=L"\sin(\frac{1}{x})", args...)
p2 = plot(x->cos(1/x); ylabel=L"\cos(\frac{1}{x})", args...)
plot(p1, p2, size=(700,300))
```


```{julia}
using DataStructures

# todo(aapeli): trie... etc
```

# Basic text processing

* multiline
* read shakespear
* td-idf
* parse, etc

# Dataframes and CSV files - intro


Brisbane speed camera locations

```{julia}
using HTTP
using CSV
using DataFrames

response = HTTP.get("https://www.data.qld.gov.au/datastore/dump/f6b5c37e-de9d-4041-8c18-f4d4b6c593a8?bom=True")

df = CSV.read(IOBuffer(response.body), DataFrame)

first(df, 5)
```

```{julia}
using SummaryTables

simple_table(first(df, 5))
```

```{julia}
# simple_table(df)
```

speed cameras by suburb vs 

missing data:...

# Dataframes - Transformations

Pumas

# JSON

```{julia}

```

# Serialization

* struct (mutable & immutable)
* write to file
* read from file

```{julia}

```


```{julia}
using Random

Random.seed!(0)

struct Node
    id::UInt16
    friends::Vector{Node}

    # inner constructor, uses the default constructor
    Node() = new(rand(UInt16), [])
    # another inner constructor
    Node(friend::Node) = new(rand(UInt16),[friend])
end
```

```{julia}
"""
Makes `n` children to node, each with a single friend
"""
function make_children(node::Node, n::Int, friend::Node)
    for _ in 1:n
        new_node = Node(friend)
        push!(node.friends, new_node)
    end
end
```


```{julia}
# make a tree
root = Node()
make_children(root, 3, root)
for node in root.friends
    make_children(node, 2,root)
end

root
```

Note that when we try to show `root`, it's complete gibberish. We can write a `Base.show()` function to make this pretty:

```{julia}
# make it show up pretty
function Base.show(io::IO, x::Node)
    shown = Set{Node}()
    function recursive_show(y::Node, depth::Int)
        print(io, "  "^depth*"Node: $(y.id)")
        if y in shown
            println(io, " (already shown)")
        else
            push!(shown, y)
            println(io, ", friends:")
            for f in y.friends
                recursive_show(f, depth+1)
            end
        end
    end
    recursive_show(x, 0)
    return nothing
end

root
```

Suppose we now want to save this in a file...

```{julia}
using Serialization
serialize("work/tree.dat", root)
```



```{julia}
newroot = deserialize("work/tree.dat")
```

<span style="font-size:100px;color:#ff0000;">BELIEVE ME</span>

# Additional online resources

...

# Exercises

...